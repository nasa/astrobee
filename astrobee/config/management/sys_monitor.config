-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.
--
-- Basic system monitor config stuff

-- System monitor will check to make sure all heartbeats have started at the
-- end of this start up time. Any heartbeats that haven't shown up will
-- trigger the corresponding heartbeat missing fault

require "context"

startup_time_sec = 30
reload_nodelet_timeout_sec = 8
heartbeat_pub_rate_sec = 5

-- Name of node used to calculate time difference between the mlp and the llp.
-- The node specified should be running on the llp as the system monitor runs
-- on the mlp
time_diff_node = "pose_extr"

-- Threshold used to trigger time drift fault
time_drift_thres_sec = 0.25

-- Types of nodelets. Used for loading nodelets.
-- Not listed nodes are calibration_dock_cam, calibration_imu,
-- calibration_nav_cam, ground_truth_localizer, and vive 
nodelet_info={
                {name="access_control", manager="mlp_management", type="access_control/AccessControl"},
                {name="arm", manager="mlp_arm", type="arm/ArmNodelet"},
                {name="choreographer", manager="mlp_mobility", type="choreographer/ChoreographerNodelet"},
                {name="comms_bridge", manager="mlp_multibridge", type="comms_bridge/CommsBridgeNodelet"},
                {name="ctl", manager="llp_gnc", type="ctl/ctl"},
                {name="data_bagger", manager="mlp_recording", type="data_bagger/DataBagger"},
                {name="dds_ros_bridge", manager="mlp_communications", type="dds_ros_bridge/DdsRosBridge"},
                {name="dock", manager="mlp_dock", type="dock/DockNodelet"},
                {name="dock_cam", manager="mlp_vision", type="is_camera/camera"},
                {name="eps_driver", manager="llp_i2c", type="eps_driver/EpsDriverNode"},
                {name="epson_imu", manager="llp_imu", type="epson_imu/EpsonImuNodelet"},
                {name="executive", manager="mlp_management", type="executive/Executive"},
                {name="fam", manager="llp_gnc", type="fam/fam"},
                {name="flashlight_aft", manager="llp_i2c", type="flashlight/FlashlightNodelet"},
                {name="flashlight_front", manager="llp_i2c", type="flashlight/FlashlightNodelet"},
                {name="framestore", manager="mlp_mobility", type="mobility/FrameStore"},
                {name="graph_loc", manager="mlp_graph_localization", type="ros_graph_localizer/RosGraphLocalizerNodelet"},
                {name="handrail_detect", manager="mlp_depth_cam", type="handrail_detect/HandrailDetect"},
                {name="image_sampler", manager="mlp_localization", type="image_sampler/ImageSampler"},
                {name="pose_extr", manager="llp_pose_extr", type="ros_pose_extrapolator/RosPoseExtrapolatorNodelet"},
                {name="laser", manager="llp_i2c", type="laser/LaserNodelet"},
                {name="light_flow", manager="llp_lights", type="light_flow/LightFlowNodelet"},
                {name="llp_cpu_mem_monitor", manager="llp_monitors", type="cpu_mem_monitor/CpuMemMonitor"},
                {name="llp_disk_monitor", manager="llp_monitors", type="disk_monitor/DiskMonitor"},
                {name="localization_manager", manager="mlp_localization", type="localization_manager/LocalizationManagerNodelet"},
                {name="localization_node", manager="mlp_vision", type="localization_node/LocalizationNodelet"},
                {name="mapper", manager="mlp_mapper", type="mapper/MapperNodelet"},
                {name="marker_tracking", manager="mlp_vision", type="marker_tracking_node/MarkerTrackingNodelet"},
                {name="mlp_cpu_mem_monitor", manager="mlp_monitors", type="cpu_mem_monitor/CpuMemMonitor"},
                {name="mlp_disk_monitor", manager="mlp_monitors", type="disk_monitor/DiskMonitor"},
                {name="nav_cam", manager="mlp_vision", type="is_camera/camera"},
                {name="optical_flow_nodelet", manager="mlp_vision", type="lk_optical_flow/LKOpticalFlowNodelet"},
                {name="perch", manager="mlp_perch", type="perch/PerchNodelet"},
                {name="perching_arm", manager="mlp_serial", type="perching_arm/PerchingArmNode"},
                {name="pico_driver", manager="mlp_depth_cam", type="pico_driver/PicoDriverNodelet"},
                {name="planner_qp", manager="mlp_depth_cam", type="planner_qp/Planner"},
                {name="planner_trapezoidal", manager="mlp_mobility", type="planner_trapezoidal/PlannerTrapezoidalNodelet"},
                {name="pmc_actuator", manager="llp_pmc", type="pmc_actuator/PmcActuatorNodelet"},
                {name="signal_lights", manager="llp_lights", type="signal_lights/SignalLightsNodelet"},
                {name="speed_cam", manager="llp_serial", type="speed_cam/SpeedCamNode"},
                {name="states", manager="mlp_states", type="states/StatesNodelet"}}

-- Keep constant with Command Args message file

BOOL = 0
DOUBLE = 1
FLOAT = 2
INT = 3
LONGLONG = 4
STRING = 5
VEC3d = 6
MAT33f = 7

-- Value helper function. Used to convert a value into a Lua table that helps
-- the system monitor read in the correct value type
function double(val)
  return {DOUBLE, val}
end

-- Value helper function. Used to convert a value into a Lua table that helps
-- the system monitor read in the correct value type
function float(val)
  return {FLOAT, val}
end

-- Value helper function. Used to convert a value into a Lua table that helps
-- the system monitor read in the correct value type
function int(val)
  return {INT, val}
end

-- Value helper function. Used to convert a value into a Lua table that helps
-- the system monitor read in the correct value type
function longlong(val)
  return {LONGLONG, val}
end

-- Value helper function. Used to convert values into a Lua table that helps
-- the system monitor read in the correct value type
function vec3d(v1, v2, v3)
  return {VEC3d, v1, v2, v3}
end

-- Value helper function. Used to convert values into a Lua table that helps
-- the system monitor read in the correct value type
function mat33f(v1, v2, v3, v4, v5, v6, v7, v8, v9)
  return {MAT33f, v1, v2, v3, v4, v5, v6, v7, v8, v9}
end

-- Response helper function. Used to convert a command into a lua table that is
-- easy for the system monitor to read in. The first argument should be the
-- name of the command and the remaining arguments should be the command
-- arguments. If the type of an argument is not a boolean or string, call the
-- corresponding function in this function call. For example if the argument is
-- a float, a function call would look something like this:
-- command(armPanAndTilt, float(35.6), float(-21.25))
function command(...)
  cmd = {}
  local num = select("#", ...)

  if (num < 1) then
    return cmd
  end

  -- First argument should be the name
  local cmd_name = select(1, ...)
  cmd.name = cmd_name

  -- Rest of the arguments are the arguments to the command
  -- If there are no arguments, there are no arguments to the command
  if (num > 1) then
    cmd.args = {}

    local tmp_val
    -- Skip command name
    for i=2,num do
      tmp_val = select(i, ...)
      -- Table already made with type and value
      if type(tmp_val) == "table" then
        table.insert(cmd.args, tmp_val)
      elseif type(tmp_val) == "boolean" then
        table.insert(cmd.args, {BOOL, tmp_val})
      elseif type(tmp_val) == "string" then
        table.insert(cmd.args, {STRING, tmp_val})
      end
    end
  end

  return cmd
end
